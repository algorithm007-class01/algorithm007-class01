//判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。 
//
// 
// 数字 1-9 在每一行只能出现一次。 
// 数字 1-9 在每一列只能出现一次。 
// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。 
// 
//
// 
//
// 上图是一个部分填充的有效的数独。 
//
// 数独部分空格内已填入了数字，空白格用 '.' 表示。 
//
// 示例 1: 
//
// 输入:
//[
//  ["5","3",".",".","7",".",".",".","."],
//  ["6",".",".","1","9","5",".",".","."],
//  [".","9","8",".",".",".",".","6","."],
//  ["8",".",".",".","6",".",".",".","3"],
//  ["4",".",".","8",".","3",".",".","1"],
//  ["7",".",".",".","2",".",".",".","6"],
//  [".","6",".",".",".",".","2","8","."],
//  [".",".",".","4","1","9",".",".","5"],
//  [".",".",".",".","8",".",".","7","9"]
//]
//输出: true
// 
//
// 示例 2: 
//
// 输入:
//[
//  ["8","3",".",".","7",".",".",".","."],
//  ["6",".",".","1","9","5",".",".","."],
//  [".","9","8",".",".",".",".","6","."],
//  ["8",".",".",".","6",".",".",".","3"],
//  ["4",".",".","8",".","3",".",".","1"],
//  ["7",".",".",".","2",".",".",".","6"],
//  [".","6",".",".",".",".","2","8","."],
//  [".",".",".","4","1","9",".",".","5"],
//  [".",".",".",".","8",".",".","7","9"]
//]
//输出: false
//解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
//     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。 
//
// 说明: 
//
// 
// 一个有效的数独（部分已被填充）不一定是可解的。 
// 只需要根据以上规则，验证已经填入的数字是否有效即可。 
// 给定数独序列只包含数字 1-9 和字符 '.' 。 
// 给定数独永远是 9x9 形式的。 
// 
// Related Topics 哈希表

package leetcode.editor.cn;

public class ValidSudoku_36 {
    
//leetcode submit region begin(Prohibit modification and deletion)
class Solution {

    private final char BLANK = '.';
    private final char ONE = '1';

    public boolean isValidSudoku(char[][] board) {
        int len = 9;
        // 行、列、子九宫格已出现的数字的缓存
        // 第一维：
        //     [0,9): 行的缓存
        //     [9,18): 列的缓存
        //     [18,26]: 子九宫格的缓存
        // 第二维：数字是否已经出现
        boolean[][] cache = new boolean[len * 3][len];
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < len; j++) {
                char ch = board[i][j];
                if (ch == BLANK) {
                    continue;
                }

                int num = ch - ONE;

                // index1是行缓存索引
                int index1 = i;
                if (cache[index1][num]) {
                    return false;
                }
                cache[index1][num] = true;

                // index2是列缓存索引
                int index2 = j + len;
                if (cache[index2][num]) {
                    return false;
                }
                cache[index2][num] = true;

                // index3是子九宫格的缓存索引
                int index3 = (i / 3) * 3 + (j / 3) + len * 2;
                if (cache[index3][num]) {
                    return false;
                }
                cache[index3][num] = true;
            }
        }
        return true;
    }
}
//leetcode submit region end(Prohibit modification and deletion)

}
  